#!/usr/bin/env python3
"""
Convert animation frames to an optimized GIF for the README.

This script takes the frames generated by create_animation.py and creates
a high-quality, optimized GIF suitable for GitHub README display.
"""

import os
import sys
import glob
from typing import List

def check_dependencies():
    """Check if required dependencies are available"""
    try:
        from PIL import Image
        return True, "PIL"
    except ImportError:
        pass
    
    # Try imageio as alternative
    try:
        import imageio
        return True, "imageio"
    except ImportError:
        pass
    
    return False, None

def create_gif_with_pil(frame_files: List[str], output_path: str, duration: int = 100) -> bool:
    """Create GIF using PIL/Pillow"""
    try:
        from PIL import Image
        
        print(f"Creating GIF with PIL...")
        
        # Load all frames
        frames = []
        for frame_file in frame_files:
            img = Image.open(frame_file)
            # Convert to RGB if necessary and resize for web
            img = img.convert('RGB')
            # Resize to reasonable size for web (max 800px wide)
            if img.width > 800:
                ratio = 800 / img.width
                new_height = int(img.height * ratio)
                img = img.resize((800, new_height), Image.Resampling.LANCZOS)
            frames.append(img)
        
        # Save as GIF with optimization
        frames[0].save(
            output_path,
            save_all=True,
            append_images=frames[1:],
            duration=duration,
            loop=0,  # Infinite loop
            optimize=True,  # Optimize palette
            disposal=2  # Clear previous frame
        )
        
        return True
        
    except Exception as e:
        print(f"Error creating GIF with PIL: {e}")
        return False

def create_gif_with_imageio(frame_files: List[str], output_path: str, fps: int = 10) -> bool:
    """Create GIF using imageio"""
    try:
        import imageio
        
        print(f"Creating GIF with imageio...")
        
        # Read frames and create GIF
        with imageio.get_writer(output_path, mode='I', fps=fps, loop=0) as writer:
            for frame_file in frame_files:
                image = imageio.imread(frame_file)
                writer.append_data(image)
        
        return True
        
    except Exception as e:
        print(f"Error creating GIF with imageio: {e}")
        return False

def optimize_gif_size(gif_path: str) -> None:
    """Apply additional optimizations to reduce GIF size"""
    try:
        from PIL import Image
        
        # Re-open and apply additional optimizations
        with Image.open(gif_path) as img:
            frames = []
            
            try:
                while True:
                    # Reduce color palette
                    frame = img.convert('P', palette=Image.ADAPTIVE, colors=64)
                    frames.append(frame.copy())
                    img.seek(img.tell() + 1)
            except EOFError:
                pass
            
            # Save optimized version
            if frames:
                optimized_path = gif_path.replace('.gif', '_optimized.gif')
                frames[0].save(
                    optimized_path,
                    save_all=True,
                    append_images=frames[1:],
                    duration=100,
                    loop=0,
                    optimize=True,
                    disposal=2
                )
                
                # Check if optimized version is smaller
                original_size = os.path.getsize(gif_path)
                optimized_size = os.path.getsize(optimized_path)
                
                if optimized_size < original_size:
                    os.replace(optimized_path, gif_path)
                    print(f"GIF optimized: {original_size} -> {optimized_size} bytes ({optimized_size/original_size:.1%})")
                else:
                    os.remove(optimized_path)
                    print("Original GIF was already optimal")
                
    except Exception as e:
        print(f"Error optimizing GIF: {e}")

def main():
    """Main GIF creation function"""
    frames_dir = "animation_frames"
    output_gif = "multiagent_defense_demo.gif"
    
    print("=" * 50)
    print("Creating Animated GIF for README")
    print("=" * 50)
    
    # Check if frames directory exists
    if not os.path.exists(frames_dir):
        print(f"Error: Frames directory '{frames_dir}' not found.")
        print("Run 'python simulation/create_animation.py' first to generate frames.")
        return 1
    
    # Get all frame files
    frame_pattern = os.path.join(frames_dir, "frame_*.png")
    frame_files = sorted(glob.glob(frame_pattern))
    
    if not frame_files:
        print(f"Error: No frame files found in '{frames_dir}'.")
        return 1
    
    print(f"Found {len(frame_files)} frames")
    
    # Check dependencies
    has_dep, dep_name = check_dependencies()
    if not has_dep:
        print("Error: No suitable image processing library found.")
        print("Please install one of the following:")
        print("  pip install Pillow")
        print("  pip install imageio")
        return 1
    
    print(f"Using {dep_name} for GIF creation")
    
    # Create GIF
    success = False
    
    if dep_name == "PIL":
        success = create_gif_with_pil(frame_files, output_gif, duration=100)
    elif dep_name == "imageio":
        success = create_gif_with_imageio(frame_files, output_gif, fps=10)
    
    if not success:
        print("Failed to create GIF")
        return 1
    
    # Get file size
    file_size = os.path.getsize(output_gif)
    print(f"Initial GIF created: {output_gif} ({file_size:,} bytes)")
    
    # Try to optimize
    if dep_name == "PIL":
        optimize_gif_size(output_gif)
        final_size = os.path.getsize(output_gif)
        print(f"Final GIF: {output_gif} ({final_size:,} bytes)")
    
    # Provide usage instructions
    print("\n" + "=" * 50)
    print("GIF CREATION COMPLETE!")
    print("=" * 50)
    print(f"Output file: {output_gif}")
    print(f"File size: {os.path.getsize(output_gif):,} bytes")
    
    if os.path.getsize(output_gif) > 10 * 1024 * 1024:  # 10MB
        print("\nWarning: GIF is larger than 10MB, which may not display well on GitHub.")
        print("Consider reducing frame count or image size.")
    
    print(f"\nTo use in README.md, add:")
    print(f"![Multi-Agent Defense Demo]({output_gif})")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())